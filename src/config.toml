seed = 2020 # random seed
use_gpu = true
log_interval = 100 # how many batches to wait before logging training status

[dataset]
name = "CIFAR10" # CIFAR10, Imagenet, Imagenette, Tiny-ImageNet
nb_classes = 10
img_shape = [32, 32, 3]

# name = "Tiny-ImageNet" # CIFAR10, Imagenet, Imagenette, Tiny-ImageNet
# nb_classes = 200
# img_shape = [64, 64, 3]

# name = "Imagenette" # CIFAR10, Imagenet, Imagenette, Tiny-ImageNet
# nb_classes = 10
# img_shape = [160, 160, 3]

# name = "Imagenet" # CIFAR10, Imagenet, Imagenette, Tiny-ImageNet
# nb_classes = 1000
# img_shape = [224, 224, 3]

[dictionary]
type = "overcomplete" # overcomplete or dct
display = false # Whether to save a plot of atoms in the dictionary (first 100)

# the rest is only used for overcomplete type
nb_atoms = 500 # number of atoms in the dictionary
lambda = 1.0 # coefficient of L1 norm for dictionary learning
batch_size = 5 # batch size while learning dictionary
iter = 1000 # number of iterations when learning the dictionary
online = false # whether to learn dictionary online

[defense]
patch_size = 4 # usually 4 for CIFAR10, 8 for others
stride = 2 # usually 2 for CIFAR10, 4 for others
activation_beta = 3.0 # beta for the activation function
assumed_budget = 0.03137254901 # the budget defense assumes, used in activation function

[neural_net]
train_batch_size = 64
test_batch_size = 100
classifier_arch = "resnet" # resnet, resnetwide, efficientnet, preact_resnet, dropout_resnet, resnet_after_encoder
nb_epochs = 70
no_frontend = false # whether to use the frontend or not
save_checkpoint = true

    [neural_net.optimizer]
    name = "sgd" # sgd, adam, rmsprop
    lr_scheduler = "cyclic" # cylic, multiplicative, step
    momentum = 0.9 # for optimizers with momentum
    weight_decay = 0.0005
    lr = 0.001 # starting lr except for cyclic scheduler

        [neural_net.optimizer.cyclic]
        lr_min = 0.0 # min LR for cyclic scheduler
        lr_max = 0.02 # max LR for cyclic scheduler

[adv_training]
method = "PGD" # TRADES, FGSM, RFGSM, PGD, PGD_EOT, PGD_EOT_normalized, PGD_EOT_sign, CWlinf_EOT, CWlinf_EOT_normalized, CWlinf
norm = "inf" # inf or a positive integer
budget = 0.03137254901 # attack budget (default: 8/255)
step_size = 0.00392156862 # (default: 0.00392156862)
nb_steps = 10
rand = true # random initialization
nb_restarts = 1 # number of random restarts

EOT_size = 10 # if EOT is used

rfgsm_alpha = 0.03921568627 # RFGSM step size

[adv_testing]
save = true # save the attack into a file
skip_clean = false # skip calculating clean accuracy while attacking
progress_bar = true # show progress bar while attacking
nb_imgs = -1 # if a positive number, only that many images are tested

rfgsm_alpha = 0.03921568627 # RFGSM step size

[ablation]